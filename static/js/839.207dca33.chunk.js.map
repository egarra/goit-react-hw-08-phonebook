{"version":3,"file":"static/js/839.207dca33.chunk.js","mappings":"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","sources":["components/ContactsList/Contacts.styled.js","components/ContactsList/ContactsList.jsx","components/Form/Form.styled.js","../node_modules/nanoid/index.browser.js","components/Section/Section.styled.js","components/Form/Form.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n    background-color: rgba(0, 0, 0, 0.9);\n    height: 100vh;\n    \n`\n\nexport const List = styled.ul `\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    border-radius: 5px;\n    padding: 20px;\n    list-style: none;\n    margin-top: 20px;\n    align-items: center;\n    margin: 0 auto;\n    /* background: radial-gradient(black, rgba(0, 0, 0, 0.8)); */\n`\n\nexport const ListItem = styled.li `\n    width: 200px;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    color: white;\n    border-bottom: 2px solid white;\n    padding-bottom: 10px;\n`\n\nexport const Text = styled.p `\n    font-size: 16px;\n`\nexport const Btn = styled.button`\n    padding: 10px 20px;\n    border: 2px solid white;\n    border-radius: 5px;\n    margin-top: 20px;\n    font-family: 'Ubuntu', sans-serif;\n\n    transition-property: color, background;\n    transition-duration: 250ms;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\n    :hover {\n        cursor: pointer;\n        background: black;\n        color: white;\n    }\n`\n\n\n","import { List, ListItem, Text, Btn, Container } from './Contacts.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts, deleteFetchedContact } from 'redux/operations'; \nimport { useEffect } from 'react';\nimport { selectVisibleContacts } from 'redux/selectors';\n\n\nexport const ContactsList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(fetchContacts())\n  }, [dispatch])\n  \n  return (\n    <Container>\n      <List>\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <ListItem key={id}>\n            <Text>{name}</Text>\n            <Text>{number}</Text>\n            <Btn type=\"button\" onClick={() => {\n              const action = deleteFetchedContact(id)\n              dispatch(action)\n            }}>\n              Delete Contact\n            </Btn>\n          </ListItem>\n        );\n      })}\n    </List>\n    </Container>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FormInput = styled.form`\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    align-items: center;\n    padding-top: 30px;\n    padding-bottom: 20px;\n    border-bottom: 2px solid white;\n`\n\nexport const Input = styled.input`\n    padding: 10px 20px;\n    border-radius: 5px;\n\n    transition-property: scale;\n    transition-duration: 250ms;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    \n    :hover,\n    :focus {\n        /* border: 5px solid white; */\n        outline: none;\n        scale: 1.1;\n    }\n\n`\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    align-items: center;\n    color: white;\n`\n\nexport const Btn = styled.button`\n    padding: 10px 20px;\n    border: 2px solid white;\n    border-radius: 5px;\n    margin-top: 20px;\n    font-family: 'Ubuntu', sans-serif;\n\n    transition-property: color, background;\n    transition-duration: 250ms;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\n    :hover {\n        cursor: pointer;\n        background: black;\n        color: white;\n    }\n`\n\nexport const Text = styled.p`\n    color: white;\n`\n\nexport const Title = styled.h2`\n    color: white;\n    text-align: center;\n`","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from 'styled-components';\n\nexport const SectionTag = styled.section`\n  \n  padding: 20px 100px;\n`;\n\nexport const Title = styled.h2`\n    font-size: 40px;\n`","import { useState } from 'react';\nimport { FormInput, Input, Text, Btn, Title } from './Form.styled';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addFetchedContact } from 'redux/operations'; \nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { SectionTag } from 'components/Section/Section.styled';\n\nexport const Form = () => {\n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts);\n\n  const inputChange = event => {\n    if (event.target.name === 'name') {\n      setName(event.target.value)\n    } else {\n      setNumber(event.target.value)\n    }\n  };\n\n  const onFormSubmit = (e) => {\n    e.preventDefault()\n    const isAtList = contacts.find(contact => contact.name === name);\n    if (isAtList) {\n      Notify.failure('Contact with such name is already exist');\n      return;\n    }\n    const contact = {\n      name,\n      number,\n      id: nanoid(),\n    };\n    \n    dispatch(addFetchedContact(contact));\n    e.target.reset();\n  }\n\n    return (\n      <SectionTag>\n        <Title>Add your contact in form below</Title>\n        <FormInput onSubmit={onFormSubmit}>\n        <Text>Name</Text>\n        <Input\n          placeholder=\"name\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={inputChange}\n        />\n        <Text>Number</Text>\n        <Input\n          placeholder=\"number\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={inputChange}\n        />\n        <Btn type=\"submit\">Add contact</Btn>\n      </FormInput>\n      </SectionTag>\n    );\n  }\n","import styled from 'styled-components';\n\nexport const InputField = styled.input `\ndisplay: block ;\n    padding: 10px 20px;\n    width: 324px;\n    border: 2px solid white;\n    border-radius: 5px;\n    margin: 0 auto;\n    margin-top: 10px;\n    margin-bottom: 20px;\n\n\n transition-property: scale;\n    transition-duration: 250ms;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    \n    :hover,\n    :focus {\n        outline: none;\n        scale: 1.1;\n    }\n`\nexport const Text = styled.p`\n    color: white;\n    text-align: center;\n`","import { useDispatch } from 'react-redux';\nimport { InputField, Text } from './Filter.styled';\nimport { filterContact } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch()\n  return (\n    <>\n      <Text>Find contacts by name</Text>\n      <InputField\n        placeholder=\"Type contact\"\n        type=\"text\"\n        onChange={e => {\n          const action = filterContact(e.target.value);\n          dispatch(action);\n        }}\n      />\n    </>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Loader } from 'components/Loader/Loader';\nimport { Form } from 'components/Form/Form';\nimport { Filter } from 'components/Filter/Filter';\nimport { selectStatus } from 'redux/selectors';\n\nexport default function Contacts() {\n  const status = useSelector(selectStatus);\n\n  return (\n    <>\n      {status === 'loading' && <Loader/>}\n      <Form/>\n      <Filter/>\n      <ContactsList />\n    </>\n  );\n}"],"names":["Container","styled","List","ListItem","Text","Btn","ContactsList","contacts","useSelector","selectVisibleContacts","dispatch","useDispatch","useEffect","fetchContacts","map","id","name","number","type","onClick","action","deleteFetchedContact","FormInput","Input","Title","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","SectionTag","Form","useState","setName","setNumber","state","inputChange","event","target","value","onSubmit","e","preventDefault","isAtList","find","contact","Notify","addFetchedContact","reset","placeholder","pattern","title","required","onChange","InputField","Filter","filterContact","Contacts","status","selectStatus","Loader"],"sourceRoot":""}